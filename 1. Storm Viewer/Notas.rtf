{\rtf1\ansi\ansicpg1252\cocoartf2511
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Menlo-Bold;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;\red184\green14\blue61;\red33\green33\blue33;}
{\*\expandedcolortbl;;\cssrgb\c78039\c14510\c30588;\cssrgb\c17255\c17255\c17255;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\deftab720
\pard\pardeftab720\partightenfactor0

\f0\b\fs28 \cf2 \expnd0\expndtw0\kerning0
FileManager.default
\f1\b0 \cf3  declares a constant called 
\f0\b \cf2 fm
\f1\b0 \cf3  and assigns it the value returned by 
\f0\b \cf2 FileManager.default
\f1\b0 \cf3 . This is a data type that lets us work with the filesystem, and in our case we'll be using it to look for files.\
\

\f0\b \cf2 Bundle.main.resourcePath!
\f1\b0 \cf3  declares a constant called 
\f0\b \cf2 path
\f1\b0 \cf3  that is set to the resource path of our app's bundle. Remember, a bundle is a directory containing our compiled program and all our assets.\
\

\f0\b \cf2 numberOfRowsInSection section: Int
\f1\b0 \cf3 . This describes what the method actually does. We know it involves a table view because that's the name of the method, but the 
\f0\b \cf2 numberOfRowsInSection
\f1\b0 \cf3  part is the actual action: this code will be triggered when iOS wants to know how many rows are in the table view.\
\

\f0\b \cf2 cellForRowAt indexPath: IndexPath
\f1\b0 \cf3  is the important part of the method name. The method is called 
\f0\b \cf2 cellForRowAt
\f1\b0 \cf3 , and will be called when you need to provide a row. The row to show is specified in the parameter: 
\f0\b \cf2 indexPath
\f1\b0 \cf3 , which is of type 
\f0\b \cf2 IndexPath
\f1\b0 \cf3 . This is a data type that contains both a section number and a row number.\
\

\f0\b \cf2 indexPath.row
\f1\b0 \cf3  will contain the row number we\'92re being asked to load, so we\'92re going to use that to read the corresponding picture from 
\f0\b \cf2 pictures
\f1\b0 \cf3 , and place it into the cell\'92s text label.\
}